using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Net;using System.Net.Mail;using System.IO;using System.Reflection;using cso.updatesp.business;using Microsoft.SharePoint.Client;namespace cso.updatesp.ui{    class Program    {        /*        static string ApplicationRowCountUrl = "http://sslmalmvm1:8080/qcbin/rest/public/domains/CPS_ALM/projects/CPSPSR/graphs/5493/layouts/default?alt=text/html&authKey=12c89872-a30b-498e-a9f7-47560b4e71cd";        static string FunctionalTestExecutionUrl = "http://sslmalmvm1:8080/qcbin/rest/public/domains/cps_alm/projects/cpspsr/graphs/5491/layouts/default?alt=text/html&authKey=d0105533-9d2b-4536-96ae-b676af508fcb";        static string DefectsAllUrl = "http://sslmalmvm1:8080/qcbin/rest/public/domains/CPS_ALM/projects/CPSPSR/graphs/5490/layouts/default?alt=text/html&authKey=1aea8a88-b9c1-407b-9463-e1fb86387161";        static string DefectsActiveUrl = "http://sslmalmvm1:8080/qcbin/rest/public/domains/CPS_ALM/projects/CPSPSR/graphs/6944/layouts/default?alt=text/html&authKey=81c59ac9-37e3-4c87-86f6-b2ce3b1b7d65";        static string CAFRegressionUrl = "http://sslmalmvm1:8080/qcbin/rest/public/domains/CPS_ALM/projects/CPSPSR/graphs/6855/layouts/default?alt=text/html&authKey=da60272a-17b1-435f-853d-f436e2fc6a7e";        static string NONCAFRegressionUrl = "http://sslmalmvm1:8080/qcbin/rest/public/domains/CPS_ALM/projects/CPSPSR/graphs/6857/layouts/default?alt=text/html&authKey=f30fb3d7-a078-4862-b79f-e3b521bd8fde";        */        static void Main(string[] args)        {            try            {                var settings = Properties.Settings.Default;                var builder = new Builder();                builder.BuildHeader();                //builder.BuildLegendTable();                builder.BuildOverallHeader("RELEASE EXECUTION STATUS:");                builder.BuildInfoName(settings.ReleaseDate.ToUpper() + " OVERALL TESTING STATUS");                builder.UpdateRowCount(0, settings.ApplicationRowCountUrl);                builder.UpdateExecutedPercentage(0, settings.FunctionalTestExecutionUrl);                builder.UpdateExecutedPercentage(1, settings.CAFRegressionUrl);                builder.UpdateExecutedPercentage(2, settings.NONCAFRegressionUrl);                builder.BuildStartParagraph();                builder.BuildRowCountInfo("Applications Impacted", 0);                builder.BuildBreak();                builder.BuildPercentageInfo("Actual % QA SYS Execution Complete (Functional)", 0, 24);                builder.BuildPercentageInfo("Actual % QA SYS Regression Execution Complete - CAF", 1, 15);                builder.BuildPercentageInfo("Actual % QA SYS Regression Execution Complete - NON-CAF ", 2, 4);                builder.BuildEndParagraph();                builder.BuildBreak();                builder.BuildTableName("Functional Test Execution - Not including Regression Tests");               builder.BuildTable(settings.FunctionalTestExecutionUrl);                builder.UpdateTotalDefects(settings.DefectsAllUrl);                builder.UpdateActiveDefects(settings.DefectsActiveUrl);               builder.BuildOverallHeader(string.Format("defect STATUS: ({0})", builder.TotalDefects));                builder.BuildStartParagraph(false);                builder.BuildPercentageInfo(string.Format("Active ({0})", builder.ActiveDefects), builder.ActiveDefectPercentage, 18);                builder.BuildPercentageInfo(string.Format("Resolved ({0})", builder.ResolvedDefects), builder.ResolvedDefectPercentage, 9);                builder.BuildEndParagraph(false);                builder.BuildBreak();                builder.BuildTableName("Defects by Status - Overall Release");                builder.BuildDefectTable(settings.DefectsAllUrl);                builder.BuildTableName("\"Active\" Defects by Severity");                builder.BuildDefectTable(settings.DefectsActiveUrl);                builder.BuildOverallHeader("regression STATUS");                builder.BuildTableName("CAF Regression");                builder.BuildTable(settings.CAFRegressionUrl);                builder.BuildTableName("Non-CAF Regression");                builder.BuildTable(settings.NONCAFRegressionUrl);                builder.BuildFooter();                if (!System.IO.File.Exists(settings.OutputFileName)                             ||                   ( System.IO.File.Exists(settings.OutputFileName) &&                        !System.IO.File.ReadAllText(settings.OutputFileName).Equals(builder.GetHtmlContent())))                {                    SaveContent.AsFile(settings.OutputFileName, builder.GetHtmlContent());                    SaveContent.AsEmail(settings.Email_From, new List<string> { settings.Email_To }, settings.Email_Subject, builder.GetHtmlContent(), Path.GetDirectoryName(settings.Email_Filename), Path.GetFullPath(settings.Email_Filename));                    SaveContent.AsSharepoint(Path.GetFullPath(settings.Email_Filename), settings.SP_Siteurl, settings.SP_Folder);                }                else                {                    SaveContent.AsLogEntry(Properties.Settings.Default.Log_FileName, "No changes detected.");                    Console.WriteLine("No changes detected.");                }            }            catch (Exception ex)            {                string error = string.Format("Error : {0}", ex.ToString());                SaveContent.AsLogEntry(Properties.Settings.Default.Log_FileName, error);                Console.WriteLine(error);            }            finally            {                SaveContent.AsLogEntry(Properties.Settings.Default.Log_FileName, "Completed");                Console.WriteLine("Completed");            }        }    }       public class SaveContent    {        public static void AsFile(string filename, string content)        {            System.IO.File.WriteAllText(filename, content);        }        public static void AsEmail(string from, List<string> to, string subject, string body, string location, string filename)        {            if (string.IsNullOrEmpty(location)) { location = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location); }            var client = new SmtpClient("myhost");            client.DeliveryMethod = SmtpDeliveryMethod.SpecifiedPickupDirectory;            client.PickupDirectoryLocation = location;            var msg = new MailMessage(from, to.FirstOrDefault(), subject, body);            msg.IsBodyHtml = true;            client.Send(msg);            var file = Directory.GetFiles(location, "*.eml").First();            var newfile = Path.Combine(Path.GetDirectoryName(file), filename);            if (System.IO.File.Exists(newfile)) { System.IO.File.Delete(newfile); }            System.IO.File.Move(file, newfile);        }        public static void AsSharepoint(string fileToUpload, string sharePointSite, string documentLibraryName)        {            using (var clientContext = new ClientContext(sharePointSite))            {                Web oWeb = clientContext.Web;                clientContext.Load(oWeb);                clientContext.ExecuteQuery();                if (!System.IO.File.Exists(fileToUpload))                    throw new FileNotFoundException("File not found.", fileToUpload);                var myLibrary = oWeb.GetFolderByServerRelativeUrl(documentLibraryName);                // Prepare to upload                Boolean replaceExistingFiles = true;                String fileName = System.IO.Path.GetFileName(fileToUpload);                FileStream fileStream = System.IO.File.OpenRead(fileToUpload);                // Upload document                var spfile = myLibrary.Files.Add(new FileCreationInformation() { Url = fileName, ContentStream = fileStream, Overwrite = replaceExistingFiles });                // Commit                 myLibrary.Update();                clientContext.ExecuteQuery();            }        }        public static void AsLogEntry(string logFile, string message)        {            string content = string.Format("{0} {1}", DateTime.Now.ToString("G"), message);            System.IO.File.AppendAllLines(logFile, new string[] { content });        }    }}
